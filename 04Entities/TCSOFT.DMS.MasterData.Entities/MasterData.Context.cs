//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace TCSOFT.DMS.MasterData.Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TCDMS_MasterDataEntities : DbContext
    {
        public TCDMS_MasterDataEntities()
            : base("name=TCDMS_MasterDataEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<common_AttachFileInfo> common_AttachFileInfo { get; set; }
        public virtual DbSet<common_LogInfo> common_LogInfo { get; set; }
        public virtual DbSet<common_WarningInfo> common_WarningInfo { get; set; }
        public virtual DbSet<dict_ButtonInfo> dict_ButtonInfo { get; set; }
        public virtual DbSet<dict_RegionInfo> dict_RegionInfo { get; set; }
        public virtual DbSet<dict_Structure> dict_Structure { get; set; }
        public virtual DbSet<master_AccountDateInfo> master_AccountDateInfo { get; set; }
        public virtual DbSet<master_AreaInfo> master_AreaInfo { get; set; }
        public virtual DbSet<master_AreaRegionInfo> master_AreaRegionInfo { get; set; }
        public virtual DbSet<master_CustomerApplyInfo> master_CustomerApplyInfo { get; set; }
        public virtual DbSet<master_CustomerInfo> master_CustomerInfo { get; set; }
        public virtual DbSet<master_DepartmentInfo> master_DepartmentInfo { get; set; }
        public virtual DbSet<master_DistributorADInfo> master_DistributorADInfo { get; set; }
        public virtual DbSet<master_DistributorInfo> master_DistributorInfo { get; set; }
        public virtual DbSet<master_DistributorOKCInfo> master_DistributorOKCInfo { get; set; }
        public virtual DbSet<master_DistributorPayInfo> master_DistributorPayInfo { get; set; }
        public virtual DbSet<master_DistributorProductLineInfo> master_DistributorProductLineInfo { get; set; }
        public virtual DbSet<master_DistributorRegionInfo> master_DistributorRegionInfo { get; set; }
        public virtual DbSet<master_DistributorServiceType> master_DistributorServiceType { get; set; }
        public virtual DbSet<master_DistributorTransport> master_DistributorTransport { get; set; }
        public virtual DbSet<master_DistributorType> master_DistributorType { get; set; }
        public virtual DbSet<master_FeedbackStat> master_FeedbackStat { get; set; }
        public virtual DbSet<master_InstrumentType> master_InstrumentType { get; set; }
        public virtual DbSet<master_MessageStat> master_MessageStat { get; set; }
        public virtual DbSet<master_OKCInfo> master_OKCInfo { get; set; }
        public virtual DbSet<master_PaymentInfo> master_PaymentInfo { get; set; }
        public virtual DbSet<master_ProductInfo> master_ProductInfo { get; set; }
        public virtual DbSet<master_ProductLine> master_ProductLine { get; set; }
        public virtual DbSet<master_ProductModel> master_ProductModel { get; set; }
        public virtual DbSet<master_ProductOKCPriceInfo> master_ProductOKCPriceInfo { get; set; }
        public virtual DbSet<master_ProductPriceInfo> master_ProductPriceInfo { get; set; }
        public virtual DbSet<master_ProductSmallType> master_ProductSmallType { get; set; }
        public virtual DbSet<master_ProductType> master_ProductType { get; set; }
        public virtual DbSet<master_RateInfo> master_RateInfo { get; set; }
        public virtual DbSet<master_RoleAuthority> master_RoleAuthority { get; set; }
        public virtual DbSet<master_RoleInfo> master_RoleInfo { get; set; }
        public virtual DbSet<master_TransportInfo> master_TransportInfo { get; set; }
        public virtual DbSet<master_UserCustomerAuthority> master_UserCustomerAuthority { get; set; }
        public virtual DbSet<master_UserInfo> master_UserInfo { get; set; }
        public virtual DbSet<master_UsersStat> master_UsersStat { get; set; }
        public virtual DbSet<vw_DepartToRegion> vw_DepartToRegion { get; set; }
    
        public virtual int proc_DistributorChangeName(string oleDis, string newDis, Nullable<bool> isOKCPrice, Nullable<bool> isPrediction, Nullable<bool> isMessaging, Nullable<bool> isSales, Nullable<bool> isInformation, Nullable<bool> isInventory, Nullable<bool> isProfileBulletin, Nullable<bool> isGeneralContract, Nullable<bool> isLeaseContract, Nullable<bool> isPriceStatus, Nullable<bool> isMinimumOrderQuantity, Nullable<bool> isMinimumOrderAmount, Nullable<bool> isReactionCupBalance, Nullable<bool> isFOCBalance, Nullable<bool> isInventoryInitialInventory, ObjectParameter isOK)
        {
            var oleDisParameter = oleDis != null ?
                new ObjectParameter("OleDis", oleDis) :
                new ObjectParameter("OleDis", typeof(string));
    
            var newDisParameter = newDis != null ?
                new ObjectParameter("NewDis", newDis) :
                new ObjectParameter("NewDis", typeof(string));
    
            var isOKCPriceParameter = isOKCPrice.HasValue ?
                new ObjectParameter("IsOKCPrice", isOKCPrice) :
                new ObjectParameter("IsOKCPrice", typeof(bool));
    
            var isPredictionParameter = isPrediction.HasValue ?
                new ObjectParameter("IsPrediction", isPrediction) :
                new ObjectParameter("IsPrediction", typeof(bool));
    
            var isMessagingParameter = isMessaging.HasValue ?
                new ObjectParameter("IsMessaging", isMessaging) :
                new ObjectParameter("IsMessaging", typeof(bool));
    
            var isSalesParameter = isSales.HasValue ?
                new ObjectParameter("IsSales", isSales) :
                new ObjectParameter("IsSales", typeof(bool));
    
            var isInformationParameter = isInformation.HasValue ?
                new ObjectParameter("IsInformation", isInformation) :
                new ObjectParameter("IsInformation", typeof(bool));
    
            var isInventoryParameter = isInventory.HasValue ?
                new ObjectParameter("IsInventory", isInventory) :
                new ObjectParameter("IsInventory", typeof(bool));
    
            var isProfileBulletinParameter = isProfileBulletin.HasValue ?
                new ObjectParameter("IsProfileBulletin", isProfileBulletin) :
                new ObjectParameter("IsProfileBulletin", typeof(bool));
    
            var isGeneralContractParameter = isGeneralContract.HasValue ?
                new ObjectParameter("IsGeneralContract", isGeneralContract) :
                new ObjectParameter("IsGeneralContract", typeof(bool));
    
            var isLeaseContractParameter = isLeaseContract.HasValue ?
                new ObjectParameter("IsLeaseContract", isLeaseContract) :
                new ObjectParameter("IsLeaseContract", typeof(bool));
    
            var isPriceStatusParameter = isPriceStatus.HasValue ?
                new ObjectParameter("IsPriceStatus", isPriceStatus) :
                new ObjectParameter("IsPriceStatus", typeof(bool));
    
            var isMinimumOrderQuantityParameter = isMinimumOrderQuantity.HasValue ?
                new ObjectParameter("IsMinimumOrderQuantity", isMinimumOrderQuantity) :
                new ObjectParameter("IsMinimumOrderQuantity", typeof(bool));
    
            var isMinimumOrderAmountParameter = isMinimumOrderAmount.HasValue ?
                new ObjectParameter("IsMinimumOrderAmount", isMinimumOrderAmount) :
                new ObjectParameter("IsMinimumOrderAmount", typeof(bool));
    
            var isReactionCupBalanceParameter = isReactionCupBalance.HasValue ?
                new ObjectParameter("IsReactionCupBalance", isReactionCupBalance) :
                new ObjectParameter("IsReactionCupBalance", typeof(bool));
    
            var isFOCBalanceParameter = isFOCBalance.HasValue ?
                new ObjectParameter("IsFOCBalance", isFOCBalance) :
                new ObjectParameter("IsFOCBalance", typeof(bool));
    
            var isInventoryInitialInventoryParameter = isInventoryInitialInventory.HasValue ?
                new ObjectParameter("IsInventoryInitialInventory", isInventoryInitialInventory) :
                new ObjectParameter("IsInventoryInitialInventory", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_DistributorChangeName", oleDisParameter, newDisParameter, isOKCPriceParameter, isPredictionParameter, isMessagingParameter, isSalesParameter, isInformationParameter, isInventoryParameter, isProfileBulletinParameter, isGeneralContractParameter, isLeaseContractParameter, isPriceStatusParameter, isMinimumOrderQuantityParameter, isMinimumOrderAmountParameter, isReactionCupBalanceParameter, isFOCBalanceParameter, isInventoryInitialInventoryParameter, isOK);
        }
    }
}
